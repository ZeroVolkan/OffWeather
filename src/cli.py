import cmd
import click
from loguru import logger
from dataclasses import dataclass
from setting import Setting
from ometeo import OpenMeteoAPI

exist_apis = {
    "open-meteo": {
        "class": "OpenMeteoAPI",
        "config": "OpenMeteoConfig",
    },
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ API –∑–¥–µ—Å—å
    # "weather-api": {
    #     "class": "WeatherAPI",
    #     "config": "WeatherConfig",
    # },
}


@dataclass
class OpenMeteoConfig:
    api_key: str | None = None
    city: str | None = None
    country: str | None = None
    language: str | None = None
    count: int | None = None


class DebugShell(cmd.Cmd):
    prompt = "(debug) "
    intro = "Debug Shell - –≤–≤–µ–¥–∏—Ç–µ help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"

    def __init__(self):
        super().__init__()
        self.setting = Setting("setting.toml")
        self.config = None
        self.api = None
        self.current_api = None
        self.current_config_class = None
        logger.add(".log/debug.log")
        logger.info("Debug shell started")

    def do_list_apis(self, args):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ API"""
        print("üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ API:")
        for api_name, api_info in exist_apis.items():
            status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if api_name == self.current_api else "‚ö´ –¥–æ—Å—Ç—É–ø–µ–Ω"
            print(f"  {api_name} ({api_info['class']}) - {status}")

    def do_switch_api(self, api_name):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ API: switch_api open-meteo"""
        if not api_name or api_name not in exist_apis:
            print(f"‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ API: {list(exist_apis)}")
            return

        self.current_api = api_name
        self.current_config_class = self._get_config_class(api_name)
        logger.info(f"Switched to API: {api_name}")
        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {api_name}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ API
        try:
            self.config = self.setting.fetch(self.current_config_class, [api_name])
            logger.info(f"Config loaded for {api_name}")
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"Config not found for {api_name}: {e}")
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è")
            self.config = self.current_config_class()

    def _get_config_class(self, api_name):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è API"""
        if api_name not in exist_apis:
            return OpenMeteoConfig

        api_info = exist_apis[api_name]
        if api_info["config"] == "OpenMeteoConfig":
            return OpenMeteoConfig
        else:
            # –î–ª—è –±—É–¥—É—â–∏—Ö API –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –¥—Ä—É–≥–∏–µ –∫–ª–∞—Å—Å—ã
            return OpenMeteoConfig

    def do_load_config(self, api_name):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: load_config open-meteo"""
        if not api_name:
            api_name = self.current_api
        if not api_name:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ API –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ switch_api")
            return

        config_class = self._get_config_class(api_name)

        try:
            self.config = self.setting.fetch(config_class, [api_name])
            self.current_config_class = config_class
            logger.info(f"Config loaded for {api_name}")
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"Error loading config: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.config = config_class()
            self.current_config_class = config_class

    def do_create_api(self, args):
        """–°–æ–∑–¥–∞—Ç—å API —ç–∫–∑–µ–º–ø–ª—è—Ä"""
        if not self.config:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return

        if not self.current_api:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ API")
            return

        try:
            if self.current_api == "open-meteo":
                self.api = OpenMeteoAPI(
                    city=self.config.city,
                    country=self.config.country,
                    language=self.config.language,
                    count=self.config.count,
                )
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ API

            logger.info(f"API instance created for {self.current_api}")
            print("‚úÖ API —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logger.error(f"Error creating API: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API: {e}")

    def do_refresh(self, args):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ API"""
        if not self.api:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ API")
            return

        try:
            self.api.refresh()
            logger.info("API data refreshed")
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"Error refreshing API: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def do_show_data(self, endpoint):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: show_data GeoEndpoint"""
        if not self.api:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ API")
            return

        try:
            data = self.api.get_endpoint(endpoint or "GeoEndpoint").data
            logger.info(f"Data retrieved from {endpoint}")
            print(f"üìä –î–∞–Ω–Ω—ã–µ {endpoint}: {data}")
        except Exception as e:
            logger.error(f"Error getting data from {endpoint}: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def do_set_config(self, args):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: set_config city Moscow"""
        if not self.config:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return

        parts = args.split(maxsplit=1)
        if len(parts) < 2:
            print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: set_config <–ø–∞—Ä–∞–º–µ—Ç—Ä> <–∑–Ω–∞—á–µ–Ω–∏–µ>")
            return

        param, value = parts
        if value.lower() == "none":
            value = None
        elif param == "count" and value is not None:
            try:
                value = int(value)
            except ValueError:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è count: {value}")
                return

        if hasattr(self.config, param):
            setattr(self.config, param, value)
            logger.info(f"Config parameter {param} set to {value}")
            print(f"‚úÖ {param} = {value}")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")

    def do_save_config(self, args):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if not self.config:
            print("‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        if not self.current_api:
            print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ API")
            return

        try:
            self.setting.save(self.config, [self.current_api])
            logger.info(f"Config saved for {self.current_api}")
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è {self.current_api}")
        except Exception as e:
            logger.error(f"Error saving config: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def do_status(self, args):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
        print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        print(f"  –¢–µ–∫—É—â–∏–π API: {self.current_api or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}")
        if self.current_api and self.current_api in exist_apis:
            api_info = exist_apis[self.current_api]
            print(f"    –ö–ª–∞—Å—Å API: {api_info['class']}")
            print(f"    –ö–æ–Ω—Ñ–∏–≥: {api_info['config']}")

        print(f"  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–∑–∞–≥—Ä—É–∂–µ–Ω–∞' if self.config else '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}")
        if self.config:
            print(
                f"    –¢–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞: {self.current_config_class.__name__ if self.current_config_class else 'unknown'}"
            )
            for field_name in self.config.__annotations__.keys():
                field_value = getattr(self.config, field_name, "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                if field_name == "api_key" and field_value:
                    field_value = "***—Å–∫—Ä—ã—Ç***"
                print(f"    {field_name}: {field_value or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

        print(f"  API —ç–∫–∑–µ–º–ø–ª—è—Ä: {'—Å–æ–∑–¥–∞–Ω' if self.api else '–Ω–µ —Å–æ–∑–¥–∞–Ω'}")
        if self.api:
            print(
                f"    Endpoints: {list(self.api.endpoints.keys()) if hasattr(self.api, 'endpoints') else '–Ω/–¥'}"
            )

        print(f"  –î–æ—Å—Ç—É–ø–Ω—ã–µ API: {len(exist_apis)} ({', '.join(exist_apis.keys())})")

    def do_quit(self, args):
        """–í—ã—Ö–æ–¥"""
        logger.info("Debug shell stopped")
        return True


@click.group()
def cli():
    logger.add(".log/cli.log")
    logger.info("Starting CLI")


@cli.command()
def debug():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å debug shell"""
    DebugShell().cmdloop()


@cli.command()
@click.option("--api-key", default=None, help="API key for OpenMeteo")
@click.option("--city", default=None, help="City name")
@click.option("--country", default=None, help="Country name")
@click.option("--language", default=None, help="Language code")
@click.option("--count", default=None, type=int, help="Number of results")
def open_meteo(api_key, city, country, language, count):
    setting = Setting("setting.toml")

    try:
        config = setting.fetch(OpenMeteoConfig, ["open-meteo"])
    except (KeyError, TypeError):
        config = OpenMeteoConfig()

    try:
        api: OpenMeteoAPI = OpenMeteoAPI(
            city=config.city or city,
            country=config.country or country,
            language=config.language or language,
            count=config.count or count,
        )
    except Exception as e:
        logger.error("Error creating API instance: {}", e)
        return

    api.refresh()
    logger.info("GeoEndpoint data: {}", api.get_endpoint("GeoEndpoint").data)


@cli.command()
@click.option("--api", required=True)
@click.option("--api-key", default=None, help="API key for OpenMeteo")
@click.option("--city", default=None, help="City name")
@click.option("--country", default=None, help="Country name")
@click.option("--language", default=None, help="Language code")
@click.option("--count", default=None, type=int, help="Number of results")
def setting(api, api_key, city, country, language, count):
    if api not in exist_apis:
        logger.error("API doesn't exist")
        return

    setting = Setting("setting.toml")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_class = _get_config_class_by_name(api)

    config = config_class(
        api_key=api_key, city=city, country=country, language=language, count=count
    )
    setting.save(config, [api])
    logger.info("Configuration saved successfully")


def _get_config_class_by_name(api_name):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if api_name not in exist_apis:
        return OpenMeteoConfig

    api_info = exist_apis[api_name]
    if api_info["config"] == "OpenMeteoConfig":
        return OpenMeteoConfig
    else:
        return OpenMeteoConfig


if __name__ == "__main__":
    cli()
